# If not running interactively, don't do anything
[ -z "$PS1" ] && return

OS="unknown"
case "$OSTYPE" in
  darwin*) OS="osx" ;; 
  linux*) OS="linux" ;;
  bsd*) OS="bsd" ;;
  *) OS="unknown" ;;
esac

#osx color terminal
export CLICOLOR=1
# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

export HISTFILESIZE=10000 # Record last 10,000 commands
export HISTSIZE=10000 # Record last 10,000 commands per sessioin

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set up TERM variables.
# vt100 and xterm have no color in vim (at least on unixs), but if we call them xterm-color, they will.
# (vt100 for F-Secure SSH.)
# This may well be the case for some other terms, so I'm putting them here.
# Also set up a variable to indicate whether to set up the title functions.
# TODO gnome-terminal, or however it reports itself
case $TERM in

  screen)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  xterm-color|color_xterm|rxvt|Eterm|screen*) # screen.linux|screen-w
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  linux)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=false
  ;;

  xterm|vt100)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  *xterm*|eterm|rxvt*)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  *)
    TERM_IS_COLOR=false
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=false
  ;;

esac

# dircolors... make sure that we have a color terminal, dircolors exists, and ls supports it.
if $TERM_IS_COLOR && ( dircolors --help && ls --color ) &> /dev/null; then
  # For some reason, the unixs machines need me to use $HOME instead of ~
  # List files from highest priority to lowest.  As soon as the loop finds one that works, it will exit.
  for POSSIBLE_DIR_COLORS in "$HOME/.dir_colors" "/etc/DIR_COLORS"; do
    [[ -f "$POSSIBLE_DIR_COLORS" ]] && [[ -r "$POSSIBLE_DIR_COLORS" ]] && eval `dircolors -b "$POSSIBLE_DIR_COLORS"` && break
  done

  alias ls="ls --color=auto"
  alias ll="ls --color=auto -l"
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
else
  # No color, so put a slash at the end of directory names, etc. to differentiate.
  alias ls="ls -F"
  alias ll="ls -lF"
fi

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Set $TERM for libvte terminals that set $TERM wrong (like gnome-terminal)
{
  [ "_$TERM" = "_xterm" ] && type ldd && type grep && type tput && [ -L "/proc/$PPID/exe" ] && {
    if ldd /proc/$PPID/exe | grep libvte; then
      if [ "`tput -Txterm-256color colors`" = "256" ]; then
        TERM=xterm-256color
      elif [ "`tput -Txterm-256color colors`" = "256" ]; then
        TERM=xterm-256color
      elif tput -T xterm; then
        TERM=xterm
      fi
    fi
  }
} >/dev/null 2>/dev/null

export EDITOR=vim
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

PS1="\[$(tput setaf 2)\][\u@\h \W \$ \[$(tput sgr0)\]"
calc () { echo "$*" | bc -l; }
md () { mkdir -p "$1" && cd "$1"; }
function ff() { find . -type f -iname '*'$*'*' -ls ; }
function fe() { find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ; }

export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
export CPPPATH="/opt/local/include/:$CPPPATH"

# todo move
export GOPATH=$HOME/Development/Golang/libs

export PATH="/usr/local/include:/usr/local/bin:/opt/local/bin:/opt/local/include:/opt/local/sbin:$PATH"
export PATH=$PATH:$GOPATH/bin

# Add RVM to PATH for scripting
if [ -d ~/.rvm ]; then
    export PATH=$PATH:$HOME/.rvm/bin 
fi

# Add Heroku Toolbelt
if [ -d /usr/local/heroku ]; then
    export PATH=PATH="/usr/local/heroku/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

if [ -f /opt/local/etc/bash_completion ]; then
    . /opt/local/etc/bash_completion
fi

if [ -f ~/.docker_conf ]; then
    . ~/.docker_conf
fi

if [ -f ~/.git-completion.sh ]; then
    . ~/.git-completion.sh
fi

if [ -f ~/.work ]; then
    . ~/.work
fi

# add hub
if hash hub 2>/dev/null; then
    eval "$(hub alias -s)"
fi

case $OS in

  osx)
    export JS_CMD=`which node`
    export ARCHFLAGS="-arch x86_64"
    export ARCH_FLAGS="-arch x86_64"

    if hash boot2docker 2>/dev/null; then
        $(boot2docker shellinit 2>/dev/null)
        export DOCKER_CERT_PATH=$HOME/.boot2docker/certs/boot2docker-vm
        export DOCKER_TLS_VERIFY=1
    fi
  
    if [ -d "/Applications/Postgres.app/Contents/Versions/9.3/bin" ] ; then
        export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/9.3/bin
    fi

    if [ -d "/Applications/Postgres.app/Contents/Versions/9.4/bin" ] ; then
        export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/9.4/bin
    fi

    export JAVA_HOME=$(/usr/libexec/java_home)

  ;;

esac

